pico-8 cartridge // http://www.pico-8.com
version 43
__lua__

function
    px9_decomp(x0,y0,src,vget,vset)

    local function vlist_val(l, val)
        -- find position and move
        -- to head of the list

--[ 2-3x faster than block below
        local v,i=l[1],1
        while v!=val do
            i+=1
            v,l[i]=l[i],v
        end
        l[1]=val
--]]

--[[ 7 tokens smaller than above
        for i,v in ipairs(l) do
            if v==val then
                add(l,deli(l,i),1)
                return
            end
        end
--]]
    end

    -- read an m-bit num from src
    local function getval(m)
        -- $src: 4 bytes at flr(src)
        -- >>src%1*8: sub-byte pos
        -- <<32-m: zero high bits
        -- >>>16-m: shift to int
        local res=$src >> src%1*8 << 32-m >>> 16-m
        src+=m>>3 --m/8
        return res
    end

    -- get number plus n
    local function gnp(n)
        local bits=0
        repeat
            bits+=1
            local vv=getval(bits)
            n+=vv
        until vv<(1<<bits)-1
        return n
    end

    -- header

    local
        w_1,h_1,      -- w-1,h-1
        eb,el,pr,
        splen,
        predict
        =
        gnp"0",gnp"0",
        gnp"1",{},{},
        0
        --,nil

    for i=1,gnp"1" do
        add(el,getval(eb))
    end
    for y=y0,y0+h_1 do
        for x=x0,x0+w_1 do
            splen-=1

            if splen<1 then
                splen,predict=gnp"1",not predict
            end

            local a=y>y0 and vget(x,y-1) or 0

            -- create vlist if needed
            local l=pr[a] or {unpack(el)}
            pr[a]=l

            -- grab index from stream
            -- iff predicted, always 1

            local v=l[predict and 1 or gnp"2"]

            -- update predictions
            vlist_val(l, v)
            vlist_val(el, v)

            -- set
            vset(x,y,v)
        end
    end
end


-- px9_decomp(0,0,0x00,pget,pset)
-- repeat until btn()>0
-- px9_decomp(0,0,0x0600,pget,pset)
-- stop()

-- memcpy(0xa000,0x0000,0x2000)
-- memset(0x0000,0,0x2000)
-- memset(0x8000,0,0x2000)
-- px9_decomp(0,0,0xa000,pget,pset)
-- repeat until btn()>0
-- px9_decomp(0,0,0xa600,pget,pset)
-- repeat until btn()>0
-- -- stop()


function _init()
    reload()
    memcpy(0xa000,0x00,0x2000)
    memset(0x00,0,0x2000)
    memset(0x80,0,0x2000)

    poke(0x5f54,0x00)
    px9_decomp(0,0,0xa000,sget,sset)

    poke(0x5f54,0x80)
    px9_decomp(0,0,0xa600,sget,sset)

    for x=0,127 do
        for y=0,31 do
            mset(x,y,flr(rnd(127)))
        end
    end

    t=-1
end

function _update60()
    t+=1
end

function _draw()
    if t%120==0 then
        cls()

        -- draw map using spritesheet at 0x80
        poke(0x5f54,0x80)
        -- spr(3,40,40)
        -- sspr(0,0,64,128,0,0)
        map(0,0)

        -- draw sprites from spritesheet at 0x00
        poke(0x5f54,0x00)
        for x=0,15 do
            for y=0,15 do
                if rnd()>0.6 then
                    spr(flr(rnd(127)),x*8,y*8)
                end
            end
        end
        -- spr(3,50,40)
        -- sspr(0,0,64,128,64,0)
    end
end

__gfx__
ffffff0ffffff0dba2ad840e3401039198d8198442452cf5628089c84c6c844221a21ef2ba589c56f663c7cfd21e7d80e3e75938ff9888c168f5ce06cff0c483
c0ff64e19f1407039052cf79878f10c1c42490f39422ff9c2988c4a2fb298cf72b4222392fbacff442cfff502cff45a497461e752cf325ac32b0fb21e7952627
9c5cfecf2b039b4e2e534442c21966b5cec52e06cf802221a98962b54ec52e06cf7483262b421cee8c5291e7324421194298f32279468f1930b9c1683852e90b
a0f71830b8c1283852e90ba0ff62b08919ff8fb5e8421e012ff1f3b1a4f8d022ce49b2213cf6282d300267ac51981e7368a52884391ef2e1e7445401930cf5c3
cf4612cca1b40cf412148f984203a1940cf412148ff000c2c31ef32cf90004872cf748fb9466233b563edd61c26ff9c8426c4c613ed561c26ff71b8c4ef89403
0ff3942f0f7c8060eff294e0e70e00ff3a070f30708ff358fff311efff2842bc808b2cffe8b808b2cff82808051c8b9ff9401e403e6effffffb54219fd2cffc8
1fb58fff52e46490ff366490fff5e70effbcf0cffff76942c14838b80ffb1e42c1c548ffd01e59fb8ff52f71fffffff72619fd0cf3c5cffa0cf3c5cf1cf048b6
0c8ff90f301ea103eff1cfb0210ff31ef50908fffff42ef5e22cff18f79b80ff30ef5e2e0ef6ef5e2e0eff2a1efff201ef7c987278854effa997c6619ffb1fb2
29c5cf1cffb4429b8f38f7ced0b087424934a3c398806cb1610f84875a3c398806c948110f8062103eac64e3e42c881e11c4206c59d8cfff831422b462cffc83
142bd299070f280f7130562fb0f280f71305e73e72ef201e32e01e3e72ef201e648ffd31efffff00cfff700f39cf61ef5ef3e7b0ff2ffff7839ff53f58fd8ff1
2ff1ffb3ef4ef72c90ef3ef72c9cfffffc1fff7180ff30dc0ff30eff1468fff302ff71efffcac5cf394e90f8cfbc5cf394e90f8c128c000acfb03c8b83409100
49f7128171ffad5cf3c5c5cfbc5cfbc5cffff7f49132ff71efd2164eff2cfb8c210ff37240cffe391efff308fffb01209f8ffd210f1fb66e19f566009c3f97e7
5fcfde9ff5d259044a4096f8958566fcfffb49b0952c46c291efff33877b55e938efffd4e219c248789cfff76e1e19ffffde913acfff17b7ce5efff37e024883
21b4299cc21b848a48fb4501039198d8198442452c9c525b03e2973e0c7cfd21e7d80e3e75938ff9888d168f5ce06cff0c483c0ff64e19f1407039052cf79878
f10c1c42490f39422ff9c2988c4a2fb298cf72b4222392fbacff442cfff502cff45a497461e752cf325ac32b0fb21e79526279c5cfecf2b039b4e2e534090b44
a9d61b3798381f3288848626a9c6193798381ff11e889c2940bb3279468fd80194442942ef88c5291e74e0c62783070b4c31651ef207061934070b4c31651efd
4610332ff1f7bc1942c124ef3e76349e1b1448d92754268fd405a7004ce49b2213cf6c05b4019623cf5c3cf88a8022708fb878f9c2489536908f924280f31940
6432908f924280ff10085872cf748f310080f48ff80f739cc4666bc6cbbd285cef39194c898d26cbbc285ceff26199cf139060ef7294e1ef811c0cff529c1cf0
c10ef741e0e70e00ff7a0fff722cfff509469110758ffd17110758ff150101a28173ff3902c906cdcffffff7b8422fb58ff913e7b0fffb4c9c821ef7cc821eff
bcf0cff79f18fffffc294838070711ef73c94838b80ffb12cb2f71ffb4ef2efffffff4c22fb18f78b8ff518f78b8f38f1807d081ff31e702c5306cff38f71420
ef72cfb0210fffff94cfbc548ff30ff2711ef70cfbc5c1cfdcfbc5c1cff5c11efff201ef7c987c13b8cff533f8dc22ff73e75429b8f38ff7984271f70ff8db16
10f84827847872111c873c20e190fa47872111c8390320e11c4206c59d8c7c948113c328940c8b2b19fff17284469c48ff9172846b5231e0e501ef260ac8f587
148fb8182fb1f31f7180f11780f1f31f7180732cffe90fffff700efff308f94e7b0ff2ff1fb58f79ffff3c9cffa9f2cf6cff09ff8ffd1f72ff31e40ff1ff31e4
effff7e8fffb048ff18323cff08ff7091efff08eff58fff350000000000000000000000000000000000000000000000000000000000000000000000000000000
ffffff0ffffff0b0ef1ff2ff33ef5eff6cfff980fff728f79ff91ff2ff33e77e702cdcff88f18073725e020e061e71ef4ac140c149f58f393380738792ffb802
cd0e5acf78085010711ef758081908b80ff73a148f38173f33d02cf1c8b9f1838300e2ef909070d0f070120071ff484838687832491ff6123404048f2491ff61
234040480f110fb70001e103e320e7f0002c306c1c1c8f9380124913e0e06cfc14801ac83341cfd3005e7b050f7f0049f18f803efd24680f30f116cfb58c01e7
0e0e0073248f20080f3070708b112c710048fd249172103e802480fb5823e4206c114801e70ea0200f1e000cf8c5c51400e3c1008f19b2cbcf04868f320e780f
2f301a1ef808f58f20ef00f348f39f20ef00f348ff10f311a0e74ef1e72241cf8c9cfa4049f18fb8f59082f30fb13ef2e2ef73c8fb8b8ff70ff0ff0ff0ff0ff0
ff0ff0ff31ef12cf0cff48f780f30ff071ff210701ef2e2e770701effcc349f98fff0f05ef2e0e10f33f012cbc1c30e76e1248f334100815e0e3ac30ee050006
4938f82f02c9801c300ec05a0e9080f30240f0083349287202cd001e73020248f8087102cf6040480f1107280f308f1920587148f10cf84182c906cf0c7cf002
430ec16cf0c7cf0024306c0c948f50cff081731e710f77108f03c516802cfc100c781ea03401eff2c910708fff1760c10ef7540c542c549f90cb00107190715e
720f28fb0c1c7c712810f1fb1838f8f24030e3202cb1ea0d1a1c0916c38004873c51a3438123c8701e1e201e00771a3808c03e1e201e00771a3808c09242cb3c
5c1cd70815014848778b838bf003a021e02c1349152460c134828d052c1349152460c1348281f75832c60c1c512401212cf41e80b1070758014840349f8482f0
8320210348b049f8482f08320210348b2c1483348fd2c180b0070821ec01e7b0702c20c0f7501081871121248768f92800c0cb809012c3805e321e7664908480
5e321e7664908c10a4833cf71e90042ca0701ec0ff58720090b0f728fb8f58400e740f71fb0908fb83968f010ffb1e4a1e340cf54248f01ee02c7cf01e0212c7
807701e3e780f7290509020a148b24682ff090509020a148b2468e0b160e801e000490f7014163c0c112c100821ef0280fb703020e40f61efe06040c90ed2424
80f7091e161e1ef121248f3058785878fb9f160005ef02cf8cf030082f701e4481fb2d0731012168036cf643cd404848112cfff502cfff10e1effec3cffd7858
ffd7858ffb381ffff081fffff38f00fff70e10efff208ffff00efff30fffffd0c8f79ff91ff2ff73efff448fff31cfbcffc8f79ff91fb3f301e6ef74cf048b93
92701070b0fb0f725e020e0acf2cf9c9148b1cb49ff5401e60f25ef340c2808b80ffb240c840c548ffb1d02cf1c8b9f99601ef06cdcf0c1c10071ff484838687
8380108b8f7242c143c3c11ac8f7b09120202c71ac8f7b0912020248f808fd30080f081f110fb70001e103e0e06cfc14801ac8170703e7e0248056c91a0efe10
82fb5828fb700acf0c7481ff612348f18f803efd24680f3070708b112c710048f183830cd801eb0002cf61ac8390817401248fd249172103e802480f30750108
f07000e74e2ea0200f1e000cf8c51e5e70243cf110f34879f180d0f740cf2c710f708f12cf9c710f708f12cff08f98050f32ff0f311a0e74e4e7520acf0cf5cf
a4049f18fd81f7171ffb16cf5c5cff38f78f78f78f78f78f78f78ff90ff01e70ef72cf348f18f78b8f7908380f7171fb38380ff76e1acf4cff78782f7170f08f
997801e5e0e10f33f012cf91a000c8270f15e1077820003ac1c749701e4480e100768250f4048f10128700c91a41c3101e6080fb101012c740cb001e73020248
f8083148f10cf84182cb02cf00e74a041e403e70e3e7001a107e03e70e3e7001a10360e42cf20ef70c8b90fb08fbb00c781ea03401e7e000e3c07581280ff71e
c0830cfff8330e00ffb220e221e2acf40e50808b848b82f31871cf50e0e3eb01c08f8fd0c1c7c712810f1101ed0758e0d068c03e14002cb1ea0d1a1c0916c380
f07180708bb0d1404681f07180708bb0d1404684121ed1e2e0ee30c8280242cb3c5c1cd70815090701e81ac821230e81241c6821e81ac821230e81241c8fb2c1
1630e0ea01280901e7a0748d0838b248024281ac7424970c11090812c50ac7424970c11090812c51e02c912cf61e048508304907680fb5830161068fb2800c0c
b809012c33cf4140060e5484801e1482f190f333a4042482f190f333a404e0052c91efb0f40021658380768ff2c31084858f31cf5cf24200f328fb8f5840cf5c
943c7808ffd072d0f120ef2212c7807701e3e78070901e348b380f1f348f3948284010d02c512349f7848284010d02c5123478d03074807000a48f380a0b160e
801e000490f70148fd3810107287b0f7703020e40f6121248f38c0f0b0f0ff09012cf182c3c2c3cfdcf030082f701e74e7810049f380722c8f5968b908090348
13e73a1e620242c801efff201efff00f0ff77e1effe3c2cffe3c2cffd1c8fff70c8fffff1c708fff30f00fff710cfff700ffff18fffff2000000000000000000
