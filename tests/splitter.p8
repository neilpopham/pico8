pico-8 cartridge // http://www.pico-8.com
version 18
__lua__
-- splitter
-- by neil popham

local pad={left=0,right=1,up=2,down=3,btn1=4,btn2=5}
local screen={width=128,height=128}

function round(x) return flr(x+0.5) end

local pane={
 create=function(self,tx,ty,mx,my,sx,sy)
 local o={x=sx,y=sy,map={x=mx,y=my},tile={x=tx,y=ty},new={x=sx,y=sy},d=0.5}
  setmetatable(o,self)
  self.__index=self
  return o
 end,
 reset=function(self)
  self.d=0.5
  self.sliding=false
  self.tile.y=self.y==0 and 1 or 2
  self.tile.x=self.x==0 and 1 or 2
 end,
 update=function(self)
  if self.sliding==false then return false end
  self.d=self.d*1.25
  if self.dir==pad.up then
   self.y=self.y-self.d
   if self.y<=self.new.y then
    self.y=self.new.y<0 and 64 or 0
    self:reset()
   end
  elseif self.dir==pad.down then
   self.y=self.y+self.d
   if self.y>=self.new.y then
    self.y=self.new.y>64 and 0 or 64
    self:reset()
   end
  elseif self.dir==pad.left then
   self.x=self.x-self.d
   if self.x<=self.new.x then
    self.x=self.new.x<0 and 64 or 0
    self:reset()
   end
  elseif self.dir==pad.right then
   self.x=self.x+self.d
   if self.x>=self.new.x then
    self.x=self.new.x>64 and 0 or 64
    self:reset()
   end
  end
  return true
 end,
 draw=function(self)
  map(self.map.x,self.map.y,self.x,self.y,8,8)
  if self.y<0 then
   map(self.map.x,self.map.y,self.x,self.y+128,8,8)
  elseif self.y>64 then
   map(self.map.x,self.map.y,self.x,self.y-128,8,8)
  elseif self.x<0 then
   map(self.map.x,self.map.y,self.x+128,self.y,8,8)
  elseif self.x>64 then
   map(self.map.x,self.map.y,self.x-128,self.y,8,8)
  end
 end
}

local tile={
 panes={},
 sliding=false,
 dir=0,
 x=0,
 y=0,
 split=function(self,dir,index)
  if self.sliding then return end
  self.sliding=true
  self.dir=dir
  self.index=index
  for _,pane in pairs(self.panes) do
   if dir==pad.left or dir==pad.right then
    if pane.tile.y==index then
     pane.sliding=true
     pane.dir=dir
     pane.new.x=dir==pad.left and pane.x-64 or pane.x+64
    end
   else
    if pane.tile.x==index then
     pane.sliding=true
     pane.dir=dir
     pane.new.y=dir==pad.up and pane.y-64 or pane.y+64
    end
   end
  end
 end,
 init=function(self)
  for y=0,1 do
   for x=0,1 do
    local pane=pane:create(x+1,y+1,x*8,y*8,x*64,y*64)
    add(self.panes,pane)
   end
  end
 end,
 update=function(self)
  if not self.sliding then return end
  local sliding=false
  for _,pane in pairs(self.panes) do
   if pane.sliding then
    sliding=pane:update() or sliding
   end
  end
  if not sliding then self.sliding=false end
 end,
 draw=function(self)
  if self.sliding then
   for _,pane in pairs(self.panes) do
    pane:draw()
   end
  else
   map()
  end
 end
}

function _init()
 tile:init()
 p={x=32,y=32}
end

function _update60()
 if btn(pad.btn2) and not tile.sliding then
  if btn(pad.up) then
   tile:split(pad.up,p.x<64 and 1 or 2)
  elseif btn(pad.down) then
   tile:split(pad.down,p.x<64 and 1 or 2)
  elseif btn(pad.left) then
   tile:split(pad.left,p.y<64 and 1 or 2)
  elseif btn(pad.right) then
   tile:split(pad.right,p.y<64 and 1 or 2)
  end
 else
  if btnp(pad.up) then p.y=p.y-64 end
  if btnp(pad.down) then p.y=p.y+64 end
  if btnp(pad.left) then p.x=p.x-64 end
  if btnp(pad.right) then p.x=p.x+64 end
 end
 tile:update()
end

function _draw()
 cls()
 tile:draw()
 spr(5,p.x,p.y)
 --print(btn())
 --if (btn() > 32 and not btn(4)) then print "yo" end
end

__gfx__
000000001111111122222222333333334444444488888888cccccccc777777760000000000000000000000000000000000000000000000000000000000000000
000000001111111122222222333333334444444488888888cccccccc7666666d0000000000000000000000000000000000000000000000000000000000000000
000000001111111122222222333333334444444488888888cccccccc7666666d0000000000000000000000000000000000000000000000000000000000000000
000000001111111122222222333333334444444488888888cccccccc7666666d0000000000000000000000000000000000000000000000000000000000000000
000000001111111122222222333333334444444488888888cccccccc7666666d0000000000000000000000000000000000000000000000000000000000000000
000000001111111122222222333333334444444488888888cccccccc7666666d0000000000000000000000000000000000000000000000000000000000000000
000000001111111122222222333333334444444488888888cccccccc7666666d0000000000000000000000000000000000000000000000000000000000000000
000000001111111122222222333333334444444488888888cccccccc6ddddddd0000000000000000000000000000000000000000000000000000000000000000
__map__
0701010101010101000000000000000700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0101010101010101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0101010101010107000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0101010101010107000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0101010101010107070707070000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0101010101010101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0101010101010101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0101010101010107070000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000007070707070101010707070700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000010101010101010700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000010101010101010700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000010101010101010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000101000070707070707070101010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000010101010101010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000010101010101010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0707070700000000010101010101010700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
