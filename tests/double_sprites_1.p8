pico-8 cartridge // http://www.pico-8.com
version 43
__lua__


-- px9 data compression v10
-- by zep & co.
--
-- changelog:
--
-- v11:
--  @felice: removed unneeded
--  brackets -> 214 tokens
--
-- v10:
--  @pancelor
--  ★ remove cruft
--  ★ clever getval() tricks
--  ★ fix low-entropy bug
--  215 tokens
--  @zep: added tests tab 3
--
-- v9:
--  @pancelor
--  ★ redo bitstream order
--  234 tokens (but ~4% slower)
--
-- v8:
--  @pancelor
--  ★ smaller vlist initialization
--  241 tokens
--
-- v7:
--  smaller vlist_val by @felice
--  7b -> 254 tokens (fastest)
--  7a -> 247 tokens (smallest)
--
-- v6:
--  smaller vlist_val by @p01
--  -> 258 tokens
--
-- v5:
--  fixed bug found by @icegoat
--  262 tokens (the bug was caused by otherwise redundant code!)
--
-- v4:
--  @catatafish
--  ★ smaller decomp
--
--  @felice
--  ★ fix bit flush at end
--  ★ use 0.2.0 functionality
--  ★ even smaller decomp
--  ★ some code simpler/cleaner
--  ★ hey look, a changelog!
--
-- v3:
--  @felice
--  ★ smaller decomp
--
-- v2:
--  @zep
--  ★ original release
--
--[[

    features:
    ★ 273 token decompress
    ★ handles any bit size data
    ★ no manual tuning required
    ★ decent compression ratios


    ██▒ how to use ▒██

    1. compress your data

        px9_comp(source_x, source_y,
            width, height,
            destination_memory_addr,
            read_function)

        e.g. to compress the whole
        spritesheet to the map:

        px9_comp(0,0,128,128,
            0x2000, sget)

    …………………………………
    2. decompress

        px9_decomp(dest_x, dest_y,
            source_memory_addr,
            read_function,
            write_function)

        e.g. to decompress from map
        memory space back to the
        screen:

        px9_decomp(0,0,0x2000,
            pget,pset)

        …………………………………

        (see example below)

        note: only the decompress
        code (tab 1) is needed in
        your release cart after
        storing compressed data.

]]

function old_init()

    -- test: compress from
    -- spritesheet to map, and
    -- then decomp back to screen

    cls()
    print("compressing..",5)
    flip()

    w=128 h=128
    raw_size=(w*h+1)\2 -- bytes

    ctime=stat(1)

    -- compress spritesheet to map
    -- area (0x2000) and save cart

    clen = px9_comp(
        0,0,
        w,h,
        0x2000,
        sget)

    ctime=stat(1)-ctime

    --cstore() -- save to cart

    -- show compression stats
    print("                 "..(ctime/30).." seconds",0,0)
    print("")
    print("compressed spritesheet to map",6)
    ratio=tostr(clen/raw_size*100)
    print("bytes: "
        ..clen.." / "..raw_size
        .." ("..sub(ratio,1,4).."%)"
        ,12)
    print("")
    print("press ❎ to decompress",14)

    memcpy(0x7000,0x2000,0x1000)

    -- wait for user
    repeat until btn(❎)

    print("")
    print("decompressing..",5)
    flip()

    -- save stats screen
    local cx,cy=cursor()
    local sdata={}
    for a=0x6000,0x7ffc do
        sdata[a]=peek4(a)
    end

    dtime=stat(1)

    -- decompress data from map
    -- (0x2000) to screen

    px9_decomp(0,0,0x2000,pget,pset)

    dtime=stat(1)-dtime

    -- wait for user
    repeat until btn(❎)

    -- restore stats screen
    for a,v in pairs(sdata) do
        poke4(a,v)
    end

    -- add decompression stats
    print("                 "..(dtime/30).." seconds",cx,cy-6,5)
    print("")

end

-->8
-- px9 decompress

-- x0,y0 where to draw to
-- src   compressed data address
-- vget  read function (x,y)
-- vset  write function (x,y,v)

function
    px9_decomp(x0,y0,src,vget,vset)

    local function vlist_val(l, val)
        -- find position and move
        -- to head of the list

--[ 2-3x faster than block below
        local v,i=l[1],1
        while v!=val do
            i+=1
            v,l[i]=l[i],v
        end
        l[1]=val
--]]

--[[ 7 tokens smaller than above
        for i,v in ipairs(l) do
            if v==val then
                add(l,deli(l,i),1)
                return
            end
        end
--]]
    end

    -- read an m-bit num from src
    local function getval(m)
        -- $src: 4 bytes at flr(src)
        -- >>src%1*8: sub-byte pos
        -- <<32-m: zero high bits
        -- >>>16-m: shift to int
        local res=$src >> src%1*8 << 32-m >>> 16-m
        src+=m>>3 --m/8
        return res
    end

    -- get number plus n
    local function gnp(n)
        local bits=0
        repeat
            bits+=1
            local vv=getval(bits)
            n+=vv
        until vv<(1<<bits)-1
        return n
    end

    -- header

    local
        w_1,h_1,      -- w-1,h-1
        eb,el,pr,
        splen,
        predict
        =
        gnp"0",gnp"0",
        gnp"1",{},{},
        0
        --,nil

    for i=1,gnp"1" do
        add(el,getval(eb))
    end
    for y=y0,y0+h_1 do
        for x=x0,x0+w_1 do
            splen-=1

            if splen<1 then
                splen,predict=gnp"1",not predict
            end

            local a=y>y0 and vget(x,y-1) or 0

            -- create vlist if needed
            local l=pr[a] or {unpack(el)}
            pr[a]=l

            -- grab index from stream
            -- iff predicted, always 1

            local v=l[predict and 1 or gnp"2"]

            -- update predictions
            vlist_val(l, v)
            vlist_val(el, v)

            -- set
            vset(x,y,v)
        end
    end
end

-->8
-- px9 compress

-- x0,y0 where to read from
-- w,h   image width,height
-- dest  address to store
-- vget  read function (x,y)

function
    px9_comp(x0,y0,w,h,dest,vget)

    local dest0=dest

    local function vlist_val(l, val)
        -- find position and move
        -- to head of the list

--[ 2-3x faster than block below
        local v,i=l[1],1
        while v!=val do
            i+=1
            v,l[i]=l[i],v
        end
        l[1]=val
        return i
--]]

--[[ 8 tokens smaller than above
        for i,v in ipairs(l) do
            if v==val then
                add(l,deli(l,i),1)
                return i
            end
        end
--]]
    end

    local bit=1
    local byte=0
    local function putbit(bval)
        if (bval>0) byte+=bit
        poke(dest, byte) bit<<=1
        if (bit==256) then
            bit=1 byte=0
            dest += 1
        end
    end

    local function putval(val, bits)
        for i=0,bits-1 do
            putbit(val>>i&1)
        end
    end

    local function putnum(val)
        local bits = 0
        repeat
            bits += 1
            local mx=(1<<bits)-1
            local vv=min(val,mx)
            putval(vv,bits)
            val -= vv
        until vv<mx
    end


    -- first_used

    local el={}
    local found={}
    local highest=0
    for y=y0,y0+h-1 do
        for x=x0,x0+w-1 do
            c=vget(x,y)
            if not found[c] then
                found[c]=true
                add(el,c)
                highest=max(highest,c)
            end
        end
    end

    -- header

    local bits=1
    while highest >= 1<<bits do
        bits+=1
    end

    putnum(w-1)
    putnum(h-1)
    putnum(bits-1)
    putnum(#el-1)
    for i=1,#el do
        putval(el[i],bits)
    end


    -- data

    local pr={} -- predictions

    local dat={}

    for y=y0,y0+h-1 do
        for x=x0,x0+w-1 do
            local v=vget(x,y)

            local a=y>y0 and vget(x,y-1) or 0

            -- create vlist if needed
            local l=pr[a] or {unpack(el)}
            pr[a]=l

            -- add to vlist
            add(dat,vlist_val(l,v))

            -- and to running list
            vlist_val(el, v)
        end
    end

    -- write
    -- store bit-0 as runtime len
    -- start of each run

    local nopredict
    local pos=1

    while pos <= #dat do
        -- count length
        local pos0=pos

        if nopredict then
            while dat[pos]!=1 and pos<=#dat do
                pos+=1
            end
        else
            while dat[pos]==1 and pos<=#dat do
                pos+=1
            end
        end

        local splen = pos-pos0
        putnum(splen-1)

        if nopredict then
            -- values will all be >= 2
            while pos0 < pos do
                putnum(dat[pos0]-2)
                pos0+=1
            end
        end

        nopredict=not nopredict
    end

    if(bit>0) dest+=1 -- flush

    return dest-dest0
end

-->8
-- tests
-- uncomment run_tests() at
-- bottom of this tab. each
-- test compresses video and
-- checks crc matches.

--[[
expected sizes
blank:    21 (0.0026)
circ:    254 (0.0310)
lines:  2109 (0.2574)
dots:   2075 (0.2533)
lunch:  1275 (0.1556)
noise: 12819 (1.5648)
noise1: 3277 (0.4000)
]]

function vid_crc()
    local res=109
    for i=0x6000,0x7fff,4 do
        res ^^= 0x9e13.48b1
        res += $i
        res <<>= 5
        res *= 103.11
    end
    return res
end

-- compress whatever is on the
-- screen and check crc matches
function vid_test(name)

crc0=vid_crc()
len=px9_comp(0,0,128,128,
    0x8000,pget)
printh(name..": "..len..
 " ("..(len/8192)..")")
cls()
px9_decomp(0,0,0x8000,pget,pset)

crc1=vid_crc()
assert(crc0==crc1)
end


function run_tests()

    printh("--- px9 tests ---")

    cls(2)
    vid_test("blank")

    -- circles
    cls()circfill(64,64,32,12)
    vid_test("circ")

    --lines
    cls()
    for i=0,128,4 do
    line(i,0,0,128-i,8+i/8)
    line(i,128,128,128-i,8+i/8)
    end
    vid_test("lines")

    --dots
    cls()srand()
    for i=0,2000 do
        circfill(rnd(128),rnd(128),rnd(16),rnd(16))
    end
    vid_test("dots")

    cls()spr(0,0,0,16,16)
    vid_test("lunch")

    -- noise
    cls()
    for i=0x6000,0x7fff do
        poke(i, rnd(256))
    end
    vid_test("noise")

    -- 1-bit noise
    cls()
    for i=0x6000,0x7fff do
        poke(i, rnd(2)+(rnd(2)\1)*16)
    end
    vid_test("noise1")

    -- fuzz
    -- (would be more meaningful
    -- with more variation in
    -- data characteristics)
    srand()

    --for j=0,500 do
    for j=0,4 do
    cls(rnd(16))
    for i=0,rnd(4000) do
        circfill(rnd(128),rnd(128),rnd(16),rnd(16))
    end
    for i=0,rnd(4000) do
        pset(rnd(128),rnd(128),rnd(16),rnd(16))
    end
    vid_test("fuzz"..j)
    end

    color(7)
    cls()
    stop("ok")

end


--run_tests()


-- reload(0x0, 0x0, 0x2000, "px9_2.p8")
clen = px9_comp(0, 0, 128, 128, 0x2000, sget)
cstore(0x0, 0x2000, clen, "double_sprites_1_compressed.p8")
stop()

__gfx__
55555555115115115555dddd555d6666dddd666d55566655555ddd555555555555555555115115115555dddd555d6666dddd666d55566655555ddd5555555555
55555555115111115555dddd555d6666dddd666666566655555ddd555555555555555555115111115555dddd555d6666dddd666666566655555ddd5555555555
55555555111111115555dddd555d6666dddd666666566655665555555dd5555555555555111111115555dddd555d6666dddd666666566655665555555dd55555
5555555511111111555d6666dddd6666dddd666655555555665566655dd566655555555511111111555d6666dddd6666dddd666655555555665566655dd56665
5555555511111111ddd6dddd6666dddd6666dddd66665dd555556665555566655555555511111111ddd6dddd6666dddd6666dddd66665dd55555666555556665
5555555511111111ddd6dddd6666dddd6666dddd66665dd566656665555566655555555511111111ddd6dddd6666dddd6666dddd66665dd56665666555556665
5555555511111111ddd6dddd6666dddd666ddddd6666555566655555655555555555555511111111ddd6dddd6666dddd666ddddd666655556665555565555555
5555555511111111ddd6dddd6666dddd66d6dddd5555555566655555555555555555555511111111ddd6dddd6666dddd66d6dddd555555556665555555555555
55511555dd5dd151dd511666dddd6666dd55666655111155555555555555555555511555dd5dd151dd511666dddd6666dd556666551111555555555555555555
551115556655d1dddd111666dddd6666d5556666555551155555555555555555551115556655d1dddd111666dddd6666d5556666555551155555555555555555
55115555661111dddd116655dddd66665555666615555151555555555555555555115555661111dddd116655dddd666655556666155551515555555555555555
55555555d15511dddddd6655dddd66665555666615555151555555555555555555555555d15511dddddd6655dddd666655556666155551515555555555555555
56655555515516656556dddd6666dddd6666dddd15551151555555555555555556655555515516656556dddd6666dddd6666dddd155511515555555555555555
56655115dd1116656556d11d6666dddd6666dddd11111111555555555555555556655115dd1116656556d11d6666dddd6666dddd111111115555555555555555
55551115dd1555556666111d6666dddd6666dddd51115115555555555555555555551115dd1555556666111d6666dddd6666dddd511151155555555555555555
555511551115ddd56666115d6666dddd6666dddd555151555555555555555555555511551115ddd56666115d6666dddd6666dddd555151555555555555555555
5555555511111111dddd66661111111111111115d111111d55555555555555555555555511111111dddd66661111111111111115d111111d5555555555555555
55555555111111115ddd6666555555555555551111555511555555555555555555555555111111115ddd66665555555555555511115555115555555555555555
555555551111111155dd66661111111111111511115115115555555555555555555555551111111155dd66661111111111111511115115115555555555555555
5555555511111111555d666611111111111115111151151155555555555555555555555511111111555d66661111111111111511115115115555555555555555
5555555511111111ddd6dddd55511555555555111151151155555555555555555555555511111111ddd6dddd5551155555555511115115115555555555555555
5555555511511511ddd6dddd11511511111111111151151155555555555555555555555511511511ddd6dddd1151151111111111115115115555555555555555
5555555511511511ddd6dddd11511511111111111151151155555555555555555555555511511511ddd6dddd1151151111111111115115115555555555555555
5555555511511511ddd6dddd11511511111111111151151155555555555555555555555511511511ddd6dddd1151151111111111115115115555555555555555
5555555511511511555d666611511511111111151151151155555555555555555555555511511511555d66661151151111111115115115115555555555555555
5555555511511511555d666611511555551111111151151155555555555555555555555511511511555d66661151155555111111115115115555555555555555
5555555511511511555d666611511111111111111151151155555555555555555555555511511511555d66661151111111111111115115115555555555555555
5555555511511511555d666611511111111111111151151155555555555555555555555511511511555d66661151111111111111115115115555555555555555
5555555511511511ddd6dddd11511555555111111155551155555555555555555555555511511511ddd6dddd1151155555511111115555115555555555555555
5555555511511511ddd6dddd11511511111111111111111155555555555555555555555511511511ddd6dddd1151151111111111111111115555555555555555
5555555511511511ddd6dddd11511511111111111111111155555555555555555555555511511511ddd6dddd1151151111111111111111115555555555555555
5555555511511511ddd6dddd11511511111111111111111155555555555555555555555511511511ddd6dddd1151151111111111111111115555555555555555
55555555115115111111111111511511111111551111111155555555111111115555555511511511111111111151151111111155111111115555555511111111
55555555115115555555555555511555555555151155551155555555111111115555555511511555555555555551155555555515115555115555555511111111
55555555115111111111111111111111111115111151151155555555111111115555555511511111111111111111111111111511115115115555555511111111
55555555115111111111111111111111111115111151151155555555111111115555555511511111111111111111111111111511115115115555555511111111
55555555115555555555555555555555555115111155551155555555111111115555555511555555555555555555555555511511115555115555555511111111
55555555111111111111111111111111115115111111111155555555111111115555555511111111111111111111111111511511111111115555555511111111
55555555111111111444111111111111115115111111111155555555111111115555555511111111144411111111111111511511111111115555555511111111
55555555511111112111444111111111115115111111111155555555111111115555555551111111211144411111111111511511111111115555555511111111
11111111111111111111111442111111115115111111111111111111111111111111111111111111111111144211111111511511111111111111111111111111
55555555555155551551111111222111115115115555515111111121115511115555555555515555155111111122211111511511555551511111112111551111
11111111115151111551551111111221115555111111515111114211115511111111111111515111155155111111122111555511111151511111421111551111
11111111115151111551551111111111111111111111511112441115515511111111111111515111155155111111111111111111111151111244111551551111
55555555555155551551551111111111115555115555511114111115515511115555555555515555155155111111111111555511555551111411111551551111
1111111111111111155155111111111111511511111111111211dd15515511111111111111111111155155111111111111511511111111111211dd1551551111
1111111111111111155155111111111111511511111111111111dd15515511111111111111111111155155111111111111511511111111111111dd1551551111
1111111111111111155155111111111111511511111111111dd1dd15515511111111111111111111155155111111111111511511111111111dd1dd1551551111
1111555555555555555555515555555555555555555555551dd1dd15515511111111555555555555555555515555555555555555555555551dd1dd1551551111
1111555555555555555555515555555555555555555555551dd1dd15511111111111555555555555555555515555555555555555555555551dd1dd1551111111
1115555555555555555555515555555555555555555555551dd1dd15511111111115555555555555555555515555555555555555555555551dd1dd1551111111
1555555555555555555555515555555555555555555555551dd1dd11111111111555555555555555555555515555555555555555555555551dd1dd1111111111
1555555555555555555555515555555555555555555555551dd1dd11111111111555555555555555555555515555555555555555555555551dd1dd1111111111
1555555555555555555555515555555555555555555555551dd11111111111111555555555555555555555515555555555555555555555551dd1111111111111
1555555555555555444545515555555555555555555555551dd11111111111111555555555555555444545515555555555555555555555551dd1111111111111
15555555555555555555555155555555555555555555555511111111111111111555555555555555555555515555555555555555555555551111111111111111
155555555555555555555551111111115555555555555555d5555555d5555555155555555555555555555551111111115555555555555555d5555555d5555555
155555445554544554455551555555555555555555555555d5dd555515555555155555445554544554455551555555555555555555555555d5dd555515555555
155555555555555555555551111111115555555555555555d5dd555555555555155555555555555555555551111111115555555555555555d5dd555555555555
155555555555555555555551111111115555555555555555d5dd555555555555155555555555555555555551111111115555555555555555d5dd555555555555
155555555555555555555551514114155555555555555555d5dd555555555555155555555555555555555551514114155555555555555555d5dd555555555555
155555555555555555555551114444115555555555555555d5dd555555555555155555555555555555555551114444115555555555555555d5dd555555555555
155555555555555555555551112112115555555555555555d5dd555555555555155555555555555555555551112112115555555555555555d5dd555555555555
15555555555555555555555111444411ddddddddd5555555d5dd55555555555515555555555555555555555111444411ddddddddd5555555d5dd555555555555
dddddddd11111111111111115121121d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
15111511114114115dddddd55144441d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
55555555114444115d5555d55121121d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
55555555112112115d5555d5dddd6666000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
55555555114444115d5555d56666dddd000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
55555555111111115d5555d56666dddd000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
55555555112222115dddddd56666dddd000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
5555555511111111511111156666dddd000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
55555555115115115555dddd555d6666dddd666d55566655555ddd555555555555555555115115115555dddd555d6666dddd666d55566655555ddd5555555555
55555555115111115555dddd555d6666dddd666666566655555ddd555555555555555555115111115555dddd555d6666dddd666666566655555ddd5555555555
55555555111111115555dddd555d6666dddd666666566655665555555dd5555555555555111111115555dddd555d6666dddd666666566655665555555dd55555
5555555511111111555d6666dddd6666dddd666655555555665566655dd566655555555511111111555d6666dddd6666dddd666655555555665566655dd56665
5555555511111111ddd6dddd6666dddd6666dddd66665dd555556665555566655555555511111111ddd6dddd6666dddd6666dddd66665dd55555666555556665
5555555511111111ddd6dddd6666dddd6666dddd66665dd566656665555566655555555511111111ddd6dddd6666dddd6666dddd66665dd56665666555556665
5555555511111111ddd6dddd6666dddd666ddddd6666555566655555655555555555555511111111ddd6dddd6666dddd666ddddd666655556665555565555555
5555555511111111ddd6dddd6666dddd66d6dddd5555555566655555555555555555555511111111ddd6dddd6666dddd66d6dddd555555556665555555555555
55511555dd5dd151dd511666dddd6666dd55666655111155555555555555555555511555dd5dd151dd511666dddd6666dd556666551111555555555555555555
551115556655d1dddd111666dddd6666d5556666555551155555555555555555551115556655d1dddd111666dddd6666d5556666555551155555555555555555
55115555661111dddd116655dddd66665555666615555151555555555555555555115555661111dddd116655dddd666655556666155551515555555555555555
55555555d15511dddddd6655dddd66665555666615555151555555555555555555555555d15511dddddd6655dddd666655556666155551515555555555555555
56655555515516656556dddd6666dddd6666dddd15551151555555555555555556655555515516656556dddd6666dddd6666dddd155511515555555555555555
56655115dd1116656556d11d6666dddd6666dddd11111111555555555555555556655115dd1116656556d11d6666dddd6666dddd111111115555555555555555
55551115dd1555556666111d6666dddd6666dddd51115115555555555555555555551115dd1555556666111d6666dddd6666dddd511151155555555555555555
555511551115ddd56666115d6666dddd6666dddd555151555555555555555555555511551115ddd56666115d6666dddd6666dddd555151555555555555555555
5555555511111111dddd66661111111111111115d111111d55555555555555555555555511111111dddd66661111111111111115d111111d5555555555555555
55555555111111115ddd6666555555555555551111555511555555555555555555555555111111115ddd66665555555555555511115555115555555555555555
555555551111111155dd66661111111111111511115115115555555555555555555555551111111155dd66661111111111111511115115115555555555555555
5555555511111111555d666611111111111115111151151155555555555555555555555511111111555d66661111111111111511115115115555555555555555
5555555511111111ddd6dddd55511555555555111151151155555555555555555555555511111111ddd6dddd5551155555555511115115115555555555555555
5555555511511511ddd6dddd11511511111111111151151155555555555555555555555511511511ddd6dddd1151151111111111115115115555555555555555
5555555511511511ddd6dddd11511511111111111151151155555555555555555555555511511511ddd6dddd1151151111111111115115115555555555555555
5555555511511511ddd6dddd11511511111111111151151155555555555555555555555511511511ddd6dddd1151151111111111115115115555555555555555
5555555511511511555d666611511511111111151151151155555555555555555555555511511511555d66661151151111111115115115115555555555555555
5555555511511511555d666611511555551111111151151155555555555555555555555511511511555d66661151155555111111115115115555555555555555
5555555511511511555d666611511111111111111151151155555555555555555555555511511511555d66661151111111111111115115115555555555555555
5555555511511511555d666611511111111111111151151155555555555555555555555511511511555d66661151111111111111115115115555555555555555
5555555511511511ddd6dddd11511555555111111155551155555555555555555555555511511511ddd6dddd1151155555511111115555115555555555555555
5555555511511511ddd6dddd11511511111111111111111155555555555555555555555511511511ddd6dddd1151151111111111111111115555555555555555
5555555511511511ddd6dddd11511511111111111111111155555555555555555555555511511511ddd6dddd1151151111111111111111115555555555555555
5555555511511511ddd6dddd11511511111111111111111155555555555555555555555511511511ddd6dddd1151151111111111111111115555555555555555
55555555115115111111111111511511111111551111111155555555111111115555555511511511111111111151151111111155111111115555555511111111
55555555115115555555555555511555555555151155551155555555111111115555555511511555555555555551155555555515115555115555555511111111
55555555115111111111111111111111111115111151151155555555111111115555555511511111111111111111111111111511115115115555555511111111
55555555115111111111111111111111111115111151151155555555111111115555555511511111111111111111111111111511115115115555555511111111
55555555115555555555555555555555555115111155551155555555111111115555555511555555555555555555555555511511115555115555555511111111
55555555111111111111111111111111115115111111111155555555111111115555555511111111111111111111111111511511111111115555555511111111
55555555111111111444111111111111115115111111111155555555111111115555555511111111144411111111111111511511111111115555555511111111
55555555511111112111444111111111115115111111111155555555111111115555555551111111211144411111111111511511111111115555555511111111
11111111111111111111111442111111115115111111111111111111111111111111111111111111111111144211111111511511111111111111111111111111
55555555555155551551111111222111115115115555515111111121115511115555555555515555155111111122211111511511555551511111112111551111
11111111115151111551551111111221115555111111515111114211115511111111111111515111155155111111122111555511111151511111421111551111
11111111115151111551551111111111111111111111511112441115515511111111111111515111155155111111111111111111111151111244111551551111
55555555555155551551551111111111115555115555511114111115515511115555555555515555155155111111111111555511555551111411111551551111
1111111111111111155155111111111111511511111111111211dd15515511111111111111111111155155111111111111511511111111111211dd1551551111
1111111111111111155155111111111111511511111111111111dd15515511111111111111111111155155111111111111511511111111111111dd1551551111
1111111111111111155155111111111111511511111111111dd1dd15515511111111111111111111155155111111111111511511111111111dd1dd1551551111
1111555555555555555555515555555555555555555555551dd1dd15515511111111555555555555555555515555555555555555555555551dd1dd1551551111
1111555555555555555555515555555555555555555555551dd1dd15511111111111555555555555555555515555555555555555555555551dd1dd1551111111
1115555555555555555555515555555555555555555555551dd1dd15511111111115555555555555555555515555555555555555555555551dd1dd1551111111
1555555555555555555555515555555555555555555555551dd1dd11111111111555555555555555555555515555555555555555555555551dd1dd1111111111
1555555555555555555555515555555555555555555555551dd1dd11111111111555555555555555555555515555555555555555555555551dd1dd1111111111
1555555555555555555555515555555555555555555555551dd11111111111111555555555555555555555515555555555555555555555551dd1111111111111
1555555555555555444545515555555555555555555555551dd11111111111111555555555555555444545515555555555555555555555551dd1111111111111
15555555555555555555555155555555555555555555555511111111111111111555555555555555555555515555555555555555555555551111111111111111
