pico-8 cartridge // http://www.pico-8.com
version 16
__lua__
-- create_item
-- by neil popham

local dir={left=1,right=2}
local drag={air=1,ground=0.8,gravity=0.15,wall=0}

-- http://pico-8.wikia.com/wiki/btn
local pad={l=0,r=1,u=2,d=3,b1=4,b2=5}

-- pad_left=0 pad_right=1 pad_up=2 pad_down=3 pad_b1=4 pad_b2=5

-- https://github.com/nesbox/tic-80/wiki/key-map
-- local pad={l=2,r=3,u=0,d=1,b1=4,b2=5,b3=6,b4=7}

function round(x) return flr(x+0.5) end

function create_item(x,y)
 local i={
  x=x,
  y=y
 }
 return i
end

function create_moveable_item(x,y,ax,ay)
 local i=create_item(x,y)
 i.dx=0
 i.dy=0
 i.min={dx=0.05,dy=0.05,btn=5} 
 i.max={dx=1,dy=2,btn=15}
 i.ax=ax
 i.ay=ay
 i.is={grounded=false,jumping=false,sliding=false,falling=false}
 i.anim={
  init=function(self,stage,face)
   -- record frame count for each stage face
   for s in pairs(self.stage) do
    for f=1,2 do
     self.stage[s].face[f].fcount=#self.stage[s].face[f].frames
    end
   end
   -- init current values
   self.current:set(stage,face)
  end,
  stage={},
  current={ 
   reset=function(self)
    self.frame=1
    self.tick=0
    self.loop=true
   end,
   set=function(self,stage,face)
    if self.stage==stage then return end
    self.reset(self)
    self.stage=stage
    self.face=face or self.face
   end
  },
  add_stage=function(self,name,ticks,loop,left,right,next)
   self.stage[name]=create_stage(ticks,loop,left,right,next)
  end
 }
 i.draw=function(self)
  sprite=self.animate(self)
  spr(sprite,self.x,self.y)
 end
 i.animate=function(self)
  local current=self.anim.current
  assert(current.stage, 'current.stage is nil')
  local stage=self.anim.stage[current.stage]
  assert(stage, 'stage is '..current.stage)
  local face=stage.face[current.face]
  if current.loop then
   current.tick=current.tick+1
   if current.tick==stage.ticks then
    current.tick=0
    current.frame=current.frame+1
    if current.frame>face.fcount then
     if stage.next then
      current:set(stage.next)
      face=self.anim.stage[current.stage].face[current.face]
     elseif stage.loop then
      current.frame=1
     else
      current.frame=face.fcount
      current.loop=false
     end
    end
   end 
  end
  return face.frames[current.frame]
 end
 i.canmovex=function(self)
  local x=self.x+round(self.dx)
  if self.dx>0 then x=x+7 end
  for _,y in pairs({self.y,self.y+7}) do
   local tx=flr(x/8)
   local ty=flr(y/8)
   tile=mget(tx,ty)
   if fget(tile,0) then
    if self.is.grounded then
     self.dx=0
    else
     if fget(tile,1) then
      if self.is.sliding==false then self.dy=0 end
      self.anim.current:set("wall")
      self.is.sliding=true
     end
    end
    return false
   end
  end
  return true
 end 
 i.canmovey=function(self)
  local y=self.y+round(self.dy)
  if self.dy>0 then y=y+7 end
  for _,x in pairs({self.x,self.x+7}) do
   local tx=flr(x/8)
   local ty=flr(y/8)
   tile=mget(tx,ty)
   if fget(tile,0) then
    if self.dy>0 then
     self.y=(ty-1)*8
     self.is.grounded=true
     self.is.sliding=false
     p.is.falling=false
     if self.anim.current.stage~="walk_turn" then
      self.anim.current:set(round(self.dx)==0 and "still" or "walk")
     end
    else
     self.y=8+((ty)*8)
    end
    return false
   end
  end
  self.is.grounded=false 
  return true
 end  
 return i
end

function create_controllable_item(x,y,ax,ay)
 local i=create_moveable_item(x,y,ax,ay)
 i.update=function(self)
  local face=self.anim.current.face
  local stage=self.anim.current.stage

  local check=function(anim,stage,face)
   if face~=anim.current.face then
    if stage=="still" then stage="walk" end
    if self.anim.stage[anim.current.stage].next==nil then
     anim.current:set(stage.."_turn")
    end
   end
  end

  -- horizontal movement
  if btn(pad.l) then
   self.anim.current.face=dir.left
   check(self.anim,stage,face)
   p.dx=p.dx-p.ax
  elseif btn(pad.r) then
   self.anim.current.face=dir.right
   check(self.anim,stage,face)
   p.dx=p.dx+p.ax
  else
   if p.is.grounded then
    p.dx=p.dx*drag.ground
   elseif self.jumping then
    p.dx=p.dx*drag.air
   else
    p.dx=p.dx*drag.ground
   end   
  end
  p.dx=mid(-p.max.dx,p.dx,p.max.dx)
  if abs(p.dx)<p.min.dx then p.dx=0 end
  if p.dx~=0 then
   if p:canmovex() then
    p.x=p.x+round(p.dx)
    if p.is.sliding then 
     p.is.sliding=false
     if p.anim.current~="fall_turn" then
      self.anim.current:set("fall")
     end
    end
   end
  end

  -- vertical movement
  if p.is.sliding then
   p.dy=p.dy+drag.wall
  else
   p.dy=p.dy+drag.gravity
  end
  p.dy=mid(-p.max.dy,p.dy,p.max.dy)
  if abs(p.dy)<p.min.dy then p.dy=0 end
  if p.dy~=0 then
   if p:canmovey() then
    p.y=p.y+round(p.dy)
    if p.dy>0
     and p.is.sliding==false and p.is.grounded==false
     and p.is.falling==false then
     self.anim.current:set("fall")
     p.is.falling=true
    end
   end
  end  

 end
 return i
end

function create_stage(ticks,loop,left,right,next)
 local s={
  ticks=ticks,
  loop=loop,
  face={{frames=left},{frames=right}},
  next=next
 }
 return s
end

function _init()
 p=create_controllable_item(50,0,0.1,-1.75)
 p.anim:add_stage("still",1,false,{6},{12})
 p.anim:add_stage("walk",5,true,{1,2,3,4,5,6},{7,8,9,10,11,12})
 p.anim:add_stage("jump",1,false,{1},{7})
 p.anim:add_stage("fall",1,false,{1},{7})
 p.anim:add_stage("wall",1,false,{13},{28})
 p.anim:add_stage("walk_turn",5,false,{20,18,21,6},{17,18,19,12},"still")
 p.anim:add_stage("jump_turn",5,false,{25,26,27},{22,23,24},"jump")
 p.anim:add_stage("fall_turn",5,false,{25,26,27},{22,23,24},"fall")
 p.anim:add_stage("wall_turn",5,false,{29,30,31},{14,15,16},"jump")
 p.anim:init("still",dir.right)

 -- need a jump turn and a fall turn
 -- so, maybe turn shouldn't be a stage but a transition that any stage can have
 -- dir change in any stage moves to turn anim and then return to previous stage (not in opposite direction)
 -- record previous face/stage
 -- if face has changed 
 -- ??? somehow do turn anim then switch back to normal ...
 -- transition table
 -- table of sprites to transform from any sprite to any state
 -- (walking right to jumping left)
 -- negates use of turn
 -- lots of table data to store

--[[
 transition={
  still={{walk={{},{}},jump={{},{}},fall={{},{}}}},
  walk={
   {still={{3,4,5},{9,10,11}},jump={{},{}},fall={{},{}}},
   {still={{3,4,5},{9,10,11}},jump={{},{}},fall={{},{}}},
   {still={{3,4,5},{9,10,11}},jump={{},{}},fall={{},{}}},
   {still={{4,5},{4,5}},jump={{4,5},{4,5}},fall={{4,5},{4,5}}},
   {still={{5},{5}},jump={{5},{5}},fall={{5},{5}}},
   {still={{},{}},jump={{},{}},fall={{},{}}},
  },
  jump={{still={{3,4,5},{9,10,11}},walk={{3,4,5},{9,10,11}},fall={{3,4,5},{9,10,11}}}},
  fall={{still={{3,4,5},{9,10,11}},walk={{3,4,5},{9,10,11}},fall={{3,4,5},{9,10,11}}}},
 } 
 -- how to transition from still facing left to walking left
 anim.transition.still.face[1].frane[3].walk.face[1] = {x,y,z}
 -- how to transition from frame 3 of walking right to jumping left
 anim.transition.walk.face[1].frane[3].jump.face[2] = {x,y,z}
]]

 -- or, maybe we just use wlak_turn, fall_turn and jump_turn instead of turn and stick with current system
 --  p.anim:add_stage("walk_turn",5,false,{21,19,22,16},{18,19,20,17},"walk")
 --  p.anim:add_stage("jump_turn",5,false,{21,19,22,16},{18,19,20,17},"jump")
 --  p.anim:add_stage("fall_turn",5,false,{21,19,22,16},{18,19,20,17},"fall")
end

function _update60()
 p:update()
end

function _draw()
 cls()
 map(0,0)
 p:draw()

 print("stage:"..p.anim.current.stage,0,106)
 print("dir:"..p.anim.current.face,62,106)
 print("frame:"..p.anim.current.frame,0,113)
 print("t:"..p.anim.current.tick,62,113)
 print("dx:"..p.dx,0,120) print("dy:"..p.dy,20,120)
 print("grounded:"..(p.is.grounded and "t" or "f"),86,106)
 print("jumping:"..(p.is.jumping and "t" or "f"),86,113)
 print("sliding:"..(p.is.sliding and "t" or "f"),86,120)
 
end

__gfx__
0000000012288e8822288e8822288e8800000000000000000000000022288e8822288e8822288e8800000000000000000000000022288e8822288e8822288f88
0000000013bb8e8833bb8e8833bb8e8822288e8800000000000000002288babb2288babb2288babb22288e88000000000000000033bb8e8833bbb98833b97779
0000000012888e8822888e8822888e8833bb8e8822288e8822288e8822888e8822888e8822888e882288babb22288e8822288e8822888e8822888e8822888f88
0000000012288e8822288e8822288e8822888e8833bb8e8833bb8e8822288e8822288e8822288e8822888e882288babb2288babb22288e8822288e8822288e88
0000000002222220022222200222222022288e8822888e8822888e8802222220022222200222222022288e8822888e8822888e88022222200222222002222220
000000000002880000288000028880000222222022288e8822288e880028800000028800000028800222222022288e8822288e88288000002880000028800000
00000000000000000002880000000000028800000222222002222220000000000028800000000000000028800222222002222220288000002880000028800000
00000000000002880000000000000000288000002888000000288800288000000000000000000000000002880000288800288800000000000000000000000000
1112222222288e8822288f880000000022288e880000000022288e8822288f8822288e8822288e8822288e8822288e8822288e8822288e8822288f8822288e88
22bb979b33bbb98833b9777922288e8822bb979b22288e8833bbb98833b9777922bb979b22bb979b33b9777933bbb9882288babb22bb979b33b9777933bbb988
22888e8822888e8822888f8822bb979b22888e8833bbbe8822888e8822888f8822888e8822888e8822888e8822888e8822888e8822888e8822888f8822888e88
22288e8822288e8822288e8822888e8822288e8822888e8822288e8822288e8822288e8822288e8822288e8822288e8822288e8822288e8822288e8822288e88
02222220022222200222222022288e880222222022288e8802222220022222200222222002222220022222200222222002222220022222200222222002222220
02880000028800000028280002222220000028800222222000002880000028000028800002880000002800000002880000000288000002880000028800002880
28800000000000000000000000288000000000000002880000000000000000000000000000000000000000000000000000000288000002880000028800000288
00000000000288000000000000002880002880000288000000288000002800000288000000028800000028000000288000000000000000000000000000000000
ccc66766000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00111d11000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
cc666766000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
ccc66766000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0cccccc0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00c6c600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
b3bb3bbb00000003b00000003333333300000000000000000000004a44444444000ddd0000000000000000000000000000000000000000000000000000000000
bbbbbbbb0000003bbb0000000303b3b000000000000200000000049a44444444055dd6d000000000000000000000000000000000000000000000000000000000
3b3bb3b30000003bb0000000000300b00000000000888000000049aa4444444455dddd6000000000000000000000000000000000000000000000000000000000
4b53b5350000003b000000000000000000303000028e820009999a00444444445ddddddd00000000000000000000000000000000000000000000000000000000
4354354500000003b00000000000000003383330008880004909a000444444445ddddddd000000000005d6001010101000000000000000000000000000000000
445445440000000000000000000000000833338300023b004000a00044444444555ddddd5d6000000055ddd07070707000000000000000000000000000000000
44444444000000030000000000000000333383330033b00044099000444444445555555055dd05000d055dd06060606000000000000000000000000000000000
44444444000000000000000000000000033333300003b0000444000044444444055555000550055055d055006d6d6d6d00000000000000000000000000000000
__gff__
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000003010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
3700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3700313030303032000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
370000330000333a000000003900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3700000000313030303030303030320000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3732000000003333003300000033000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3700000000000000000039000035000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3732000000000031303030303030303000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3732000000000031373737373737373700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3738390000003b3b373737373737373700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3730303030303030373737373737373700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
