pico-8 cartridge // http://www.pico-8.com
version 29
__lua__
--
-- by neil popham

function rspr(sx,sy,x,y,a,w)
 local ca,sa=cos(a),sin(a)
 local srcx,srcy
 local ddx0,ddy0=ca,sa
 local mask=shl(0xfff8,(w-1))
 w*=4
 ca*=w-0.5
 sa*=w-0.5
 local dx0,dy0=sa-ca+w,-ca-sa+w
 w=2*w-1
 for ix=0,w do
     srcx,srcy=dx0,dy0
     for iy=0,w do
         if band(bor(srcx,srcy),mask)==0 then
             local c=sget(sx+srcx,sy+srcy)
 -- set transparent color here
             if (c!=15) pset(x+ix,y+iy,c)
         end
         srcx-=ddy0
         srcy+=ddx0
     end
     dx0+=ddx0
     dy0+=ddy0
 end
end

-- uses the new << | and & operators, saves 0.007 on cpu
function rspr2(sx,sy,x,y,a,w)
 local ca,sa=cos(a),sin(a)
 local srcx,srcy
 local ddx0,ddy0=ca,sa
 local mask=0xfff8<<w-1
 w*=4
 ca*=w-0.5
 sa*=w-0.5
 local dx0,dy0=sa-ca+w,-ca-sa+w
 w=2*w-1
 for ix=0,w do
     srcx,srcy=dx0,dy0
     for iy=0,w do
          if mask&(srcx|srcy)==0 then
             local c=sget(sx+srcx,sy+srcy)
             -- set transparent color here
             if (c!=15) pset(x+ix,y+iy,c)
         end
         srcx-=ddy0
         srcy+=ddx0
     end
     dx0+=ddx0
     dy0+=ddy0
 end
end

function _init()
 func=rspr2
 f=2
 min_mem={100,100}
 max_mem={0,0}
 min_cpu={1,1}
 max_cpu={0,0}
end

function _update60()
 if btnp()>0 then
  f=f==1 and 2 or 1
  func=f==1 and rspr or rspr2
 end
end

function _draw()
 cls()

 func(8,0,64,64,t()/2,2)

 mem=stat(0)
 if mem<min_mem[f] then min_mem[f]=mem end
 if mem>max_mem[f] then max_mem[f]=mem end
 cpu=stat(1)
 if cpu<min_cpu[f] then min_cpu[f]=cpu end
 if cpu>max_cpu[f] then max_cpu[f]=cpu end

 print("rspr",0,0,2)
 print(min_mem[1],0,10,2)
 print(max_mem[1],30,10,2)
 print(min_cpu[1],0,20,2)
 print(max_cpu[1],30,20,2)

 print("rspr2",60,0,2)
 print(min_mem[2],60,10,2)
 print(max_mem[2],90,10,2)
 print(min_cpu[2],60,20,2)
 print(max_cpu[2],90,20,2)

 print(mem,0,120,1)
 print(cpu,50,120,1)

 print(f==1 and "rspr" or "rspr2",f==1 and 0 or 60,0,3)
end

__gfx__
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000666d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000dd666ddd000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000ddd666dddd00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000ddd666dddd00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000cccccccccccc0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000ccc87ccc78cc0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000ccc87ccc78cc0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000cccccccccccc0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000ddd666dddd00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000ddd666dddd00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000088800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
