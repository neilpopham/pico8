pico-8 cartridge // http://www.pico-8.com
version 16
__lua__
--
-- by neil popham

vec2={
 --x=0,
 --y=0,
 create=function(self,x,y)
  local o={x=x,y=y}
  setmetatable(o,self)
  self.__index=self
  return o
 end,
 d2=function(self,cell)
  local dx=cell.x-self.x
  local dy=cell.y-self.y
  return dx^2+dy^2
 end
}

astar={
 create=function(self,x,y,g,h,parent)
  local o=vec2:create(x,y)
  o.f=g+h
  o.g=g
  o.h=h
  o.parent=parent
  return o
 end
} setmetatable(astar,{__index=vec2})

pathfinder={
 open={},
 closed={},
 find=function(self,start,finish)
  --printh("=============================") -- ##########################################)
  self.start=start
  self.finish=finish
  add(self.open,astar:create(start.x,start.y,0,start:d2(finish)))
  if not self:_check_open() then
   print("no path")
  end
 end,
 _check_open=function(self)
  local current=self:_get_next()
  if current==nil then
   for i,c in pairs(self.closed) do
    --printh(c.x..","..c.y..":"..c.f)
   end
   return false
  else
   if current.x==self.finish.x and current.y==self.finish.y then
    local cell=current
    repeat
     cell=cell.parent
     --printh(cell.x..","..cell.y)
     mset(cell.x,cell.y,2)
    until cell.parent==nil
    return true
   end
   add(self.closed,current)
   self:_add_neighbours(current)
   del(self.open,current)
   --printh(#self.open.." "..#self.closed)
   self:_check_open()
  end
 end,
 _get_next=function(self)
  local best={0,32727}
  for i,vec in pairs(self.open) do
   if vec.h<best[2] then
    best={i,vec.h}
   end
  end
  return self.open[best[1]]
 end,
 _add_neighbour=function(self,current,x,y)
  local tx=current.x+x
  local ty=current.y+y
  local tile=mget(tx,ty)
  if not fget(tile,0) then
   local exists=false
   for i,closed in pairs(self.closed) do
    if closed.x==tx and closed.y==ty then
     if current.g+1<closed.g then
      closed.g=current.g+1
      closed.f=closed.g+closed.h
      closed.parent=current
     end
     exists=true
     break
    end
   end
   for i,open in pairs(self.open) do
    if open.x==tx and open.y==ty then
     exists=true
     break
    end
   end
   if not exists then
    local cell=vec2:create(tx,ty)
    add(
     self.open,
     astar:create(tx,ty,current.g+1,cell:d2(self.finish),current)
    )
   end
  end 
 end,
 _add_neighbours=function(self,current)
  --local n={}
  local offset={{0,-1},{1,0},{0,1},{-1,0}}
  for _,o in pairs(offset) do
  printh(o[1].." "..o[2])
   self:_add_neighbour(current,o[1],o[2])
  end
  --[[
  for x=-1,1,1 do
   for y=-1,1,1 do
    if not (x==0 and y==0) then
     self:_add_neighbour(current,x,y)
    end
   end
  end
  ]]
 end
}

function _init()
 s=vec2:create(3,6)
 f=vec2:create(12,6)
 
end

function _update60()

end

function _draw()
 cls()
 map(0,0)
 pathfinder:find(s,f)

end



__gfx__
00000000999999995555555500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000999999995555555500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700999999995555555500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000999999995555555500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000999999995555555500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700999999995555555500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000999999995555555500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000999999995555555500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__gff__
0001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
0101010101010101010101010101010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0100000000000001000001000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0100000000000001000001000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0100000000000001000000000001000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0100000000000001000000010101000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0100000000000001000101010000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0100000000000001000100000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0100000000000001000101000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0100000000000001000001000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0100000000000001000001000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0100000000000000000001000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0100000000000000000001000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0100000000000000000001000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0101010101010101010101010101010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
