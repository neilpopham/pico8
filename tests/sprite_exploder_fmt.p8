pico-8 cartridge // http://www.pico-8.com
version 8
__lua__
local a={b=128,c=128}
function d(e) return flr(e+0.5) end
function f(g)
local e=(g*8)%128
local h=flr(g/16)*8
return{e,h}
end
function i(g)
local j=f(g)
local k={}
for l=0,7 do
k[l+1]={}
for m=0,7 do
k[l+1][m+1]=sget(j[1]+l,j[2]+m)
end
end
return k
end
function n(g,o)
o=o or 16
local p=i(g)
local k={}
local q=0
for l=1,8 do
for m=1,8 do
r=p[l][m]
if r~=o then
r=r+1
if k[r]==nil then k[r]={count=0,s=0} end
k[r].count=k[r].count+1
q=q+1
end
end
end
for t,u in pairs(k) do
k[t].s=k[t].count/q
end
return k
end
function v(g,count,o)
local k=n(g,o)
local w={}
for t,r in pairs(k) do
local x=d(count*r.s)
for y=1,x do
add(w,t-1)
end
end
return w
end
function z(g,count,o)
local e=(g*8)%128
local h=flr(g/16)*8
local r={}
local ba={}
local q=0
for l=0,7 do
for m=0,7 do
local y=sget(e+l,h+m)
if y~=o then
if r[y+1]==nil then r[y+1]=0 end
r[y+1]=r[y+1]+1
q=q+1
end
end
end
local bb=count/q
for y,bc in pairs(r) do
for t=1,d(bb*bc) do
add(ba,y-1)
end
end
return ba
end
bd={}
bd.be=function(self,bf)
local bc=bf
bc.bg=function(min,max,bh)
if bh==nil then bh=true end
local bi=(rnd()*(max-min))+min
return bh and flr(bi) or bi
end
bf.l=bf.l or{min=6,max=12}
bf.m=bf.m or bc.l
bc.e=bc.e+bc.bg(bf.l.min,bf.l.max)
bc.h=bc.h+bc.bg(bf.m.min,bf.m.max)
bc.l=0
bc.m=0
bf.bj=bf.bj or{min=10,max=30}
bc.bj=bc.bg(bf.bj.min,bf.bj.max)
bf.r=bf.r or{min=1,max=15}
if type(bf.r)=="number"then
bc.r=bf.r
else
bc.r=bc.bg(bf.r.min,bf.r.max)
end
return bc
end
bd.bk=function(self,bf)
bf=bf or{}
local bc=bd:be(bf)
bc.bl=function(self)
if self.bj==0 then return true end
pset(self.e,self.h,self.r)
self.bj=self.bj-1
return(self.bj==0)
end
return bc
end
bm={}
bm.bn=function(self,bf)
local bo=bf or{}
bo.bp=bo.bp or{min=1,max=360}
bo.bq=bo.bq or{min=1,max=3}
bo.br=function(self,bs)
for u,x in pairs(bs.bt) do
x.bp=x.bg(self.bp.min,self.bp.max)/360
x.bq=x.bg(self.bq.min,self.bq.max,false)
end
end
bo.bu=function(self,bs)
end
return bo
end
bv={}
bv.bw=function(self,bf)
local bx=bf or{}
bx.bq=bx.bq or 0.8
bx.bu=function(self,bs)
for u,x in pairs(bs.bt) do
local by=false
local e=x.e+x.l h=x.h
if e<0 or e>a.b then
by=true
else
bz=mget(flr(e/8),flr(h/8))
if fget(bz,0) then by=true end
end
if by then
x.bq=x.bq*self.bq
x.bp=(0.5-x.bp)%1
end
local bi=false
local e=x.e h=x.h+x.m
if h<0 or h>a.c then
bi=true
else
bz=mget(flr(e/8),flr(h/8))
if fget(bz,0) then bi=true end
end
if bi then
x.bq=x.bq*self.bq
x.bp=(1-x.bp)%1
end
local l=cos(x.bp)*x.bq
local m=-sin(x.bp)*x.bq
if d(l)==0 and d(m)==0 then
x.bj=flr(x.bj/2)
end
end
end
return bx
end
bv.ca=function(self,bf)
local bx=bf or{}
bx.bq=bx.bq or 0.25
bx.bu=function(self,bs)
for u,x in pairs(bs.bt) do
local l=cos(x.bp)*x.bq
local m=-sin(x.bp)*x.bq
m=m+self.bq
x.bp=atan2(l,-m)
x.bq=sqrt((l^2)+(m^2))
end
end
return bx
end
bv.cb=function(self,bf)
local bx=bf or{}
bx.cc=bx.cc or{0.9,0.6,0.4,0.25}
bx.bt={}
bx.r={
{0,0,1,1,2,1,5,6,2,4,9,3,13,5,4,9},
{0,0,0,0,1,1,1,1,5,13,1,2,4,1,5,1,2,2}
}
bx.bu=function(self,bs)
for t,x in pairs(bs.bt) do
if self.bt[t]==nil then
self.bt[t]={r=x.r,bj=x.bj}
end
local cd=x.bj/self.bt[t].bj
if cd>self.cc[1] then
if t%3==0 then x.r=10 else x.r=7 end
elseif cd>self.cc[2] then
x.r=self.bt[t].r
elseif cd>self.cc[3] then
x.r=self.r[1][self.bt[t].r+1]
elseif cd>self.cc[4] then
x.r=self.r[2][self.bt[t].r+1]
else
x.r=1
end
end
end
return bx
end
function ce(bf)
local g={
bt={},
cf={},
cg={},
ch=false
}
g.bf=bf or{}
g.ci=function(self)
self.ch=false
self.bt={}
self.bf.count=0
end
g.cj=function(self,x)
add(self.bt,x)
end
g.br=function(self)
self.bf.count=#self.bt
for u,bo in pairs(self.cf) do
bo:br(self)
end
end
g.bu=function(self)
if self.ch then return end
for u,bo in pairs(self.cf) do
bo:bu(self)
end
for u,bx in pairs(self.cg) do
bx:bu(self)
end
end
g.bl=function(self)
if self.ch then return false end
local ck=true
for t,x in pairs(self.bt) do
x.l=cos(x.bp)*x.bq
x.m=-sin(x.bp)*x.bq
x.e=x.e+x.l
x.h=x.h+x.m
local cl=self.bt[t]:bl()
ck=ck and cl
end
if ck then self.ch=true end
return true
end
return g
end
function cm(cn,e,h,count)
local g=ce({e=e,h=h,count=count,cn=cn})
add(g.cf,bm:bn({e=e,h=h,bq={min=3,max=6},bp={min=240,max=320}}))
add(g.cg,bv:ca({bq=0.25}))
add(g.cg,bv:bw({bq=0.6}))
add(g.cg,bv:cb())
local k=z(cn,count,0)
for u,y in pairs(k) do
g:cj(bd:bk({e=e,h=h,r=y,bj={min=160,max=480}}))
end
g:br()
return g
end
function ci()
g={
e=60,
h=80,
g=flr((rnd()*(95))+1),
bo=false
}
k=z(g.g,128,0)
end
function _init()
ci()
end
function _update60()
if btnp()>0 then
g.bo=true
x=cm(g.g,g.e,g.h,flr(rnd(63)+64))
end
if g.bo then x:bu() end
end
function _draw()
cls()
for t=1,#k do
pset(t,127,k[t])
end
if not g.bo then
spr(g.g,g.e,g.h)
else
if not x:bl() then ci() end
end
end
__gfx__
00000000000043b000000aa00b0b0b0000fffe0000000b00000000000000bbb00088bb000f4444f000000040000000000bb0bbb09999000000000330087883b0
00000000000bb03b0000009a00bbb0000fffffe00888b88000000000000b0b0009993b80f24fffff00000f4900000000b0bbb0bb4449990000099aa30788bb3b
0000000000babb0000000949093b4000fffffffe87e888887808888700b00b009aa99988f4ff444f0000f7f904444ff0000b0000989449900b9994a32988bb8b
0000000000babb00aaaaaa4a94949400fffffffe8e8888887888808700b008809aa99988f24fff2f0ff77fa94244fe8f0eeeee00888aa490ba444ab388898888
000000000babbb309aaaa4aa49494400efeffffe888888887880888708808878999999887f2222f7f77ffa904442f87feffeffe0989aa499baaaab3388888888
000000000babbb3049944aaa949494000eeeffe088888888b788887b887808889a999988f777777ff7ffa9002444f88f777f7770aaaa88493bbbb33089888880
0000000003bbb3309aaaaaa049494400bbeeeeeb088888803b7777b388880880099998809ffffff99faa99002222f8ef07777700a88a88490333330028882000
000000000033330009aaaa00044440000000bbb00088880003bbbb300880000000888800099999900999900002222ff000070000a88aa9490033300000088800
0eeee0000777770000077770000000007777770072222227070009900000aaa0000bb00007000070009919000000888000000000000887700bbbbbb00000e880
eeeeeeee77777a70000cccc07777770077777d7778788887007097790009a99a00b3133b077999700c19999000772888030bb03000788777b303303b08000280
ee7888887a777990ccdccccc77777777777776077878888707cc9c790008a89a0b31bb3007a99970911a91190c7c78880833338007777777b3b77b0b08e08802
eeeeeeee79a799770cdccccc77777707777776077888888707999970098aaaaa0b37bb1b0799997099a99119cc1777288383383877777777b033033b0882e280
7eeee6670799aa070077777777777770777776070722227007999970aaaa88aab3fbb13b077999704999999401cc7c7087e888884ff44ff42bbbbbb200880e82
d6776ddd07aaaa0700ccccccd7777d0077777d700072270000777700889822893bbb33b00799997004444440044c17708e888888f44ff44f2222222200002028
dddddddd0aaaaa7000cccccc0d66d000677766000007700000077000889988990bb3bb000799997009494940ff41cc0088888888444444442244444200000088
0dddd000049994000077777777777700d6666d00007777000077770099999999003b00000d7777d002494920ff00c00008888880f777777f02244420008eee00
029220009aaaaaa9022400000004499000444400000ffff0044aa440000000000000033b00000000000499000099990000fffff0048e84000000000b07f8efe0
2429f220a99a99a99227400000fff49904994940000999ff444aa4440ff00ff00003ab3b000000d0094900400999999007fee8ef048e840000cc0c70077f8ee8
42442942a94a94a9f922740004499f4994a4a99400ffff9ff444444ff99ff99f0033bb3b76666d679009099499bbbb997eefeeef0048f84000111cc00077228e
244244f9aaaaaaaaff922740fff49999a000a9440fffff944f2ffff49009900903ab33bb0768b670900990099b4b88b97e8effef0048f8400c1c711080008eef
24244f7fa99a99a90ff92274999f4999000004a4fff9888ff424444f9009900933bb3bb00073370077777777b444888b7e88eef7048f84000c1cc1c788002888
0224f779a94a94a900ff922299999994000009a98882282f4f4ffff449944994ab33bb0000077000d777777d4aaaaaa847777774048f8400011111cc88e8eef0
0024ff90aaaaaaaa000ff9224999994000000aa08822fff0f444444f00400400bb3bb0000007700006777760aaaaaaaa444444440048e840c1c7111000ee8e00
00024400a99a99a90000ff900444440000000a00ffff00000f4ffff00900009033bb0000007777000d7777d099999999048888400048e840c1cc0cc0000000b3
00070000042442400048e84000000bb000bb00bb000bb0bb000000000f4444f00cc00cc000d76d0000000000000099f00888000007000bb00008b00000077733
00077070244444420484848400000bb300bbb0bb0000b3bb00000066ffffffffcc7ccc7c0888888000000000000fff9f8788e0000078867b008bbb0000777760
000f20772424424228e8288800007bb300003b3000009b3000000660ffffffffcccdcc7d088888700088890000ffff4f8888e200007ee67b03bbbbb007777760
002442f02444444284848484000bbb30000030b3000999bb0079440004444440cccdcccd08e777e0088977a00444ff49888e280007eeee6003333bb007777660
02444240622222268828882800bbb3000088b0bb009f990b07794420077aa770cccdcccd0e777e80228977aa4ff944990ee2820007eeee700bbbb3b067776600
0424444067777776228484823bbb3b000888800009a99000d77a922df999999fcccccccc0788888008899aaaf388f99000282700007ee70088bbbb0067766000
4424244047777774222222223bb330000e888000099900006dddddd6ffffffff044004400888888008899aabf4449900000000700007700088bbb30066600000
44244200222222220244442003330000fee8000099000000066666600ffffff00ff00ff000d6dd000088aab00ff9900000000007007777000333300000090900
0004bbb00000b00b00077000000044060b7777b000ffff004992499200ffff0000040440000dd000007777000000000000b33b00004444000033330090490909
000403bb00003bb300777700044aa466b788aa7b0ffffff0444244420ff4fff0009949000007700007777770097999700737b3b00424424033ffff3394494949
02e0223b0002e2b007777440049a9a60b7ff887bffffffff22202220fffff44f099f9490002442000777777097999799b37bbb3b0424424037777ff349494994
2fe208200227223b077444400aa9a9900b7777b0ffffffff49924992f24ff42f947f99490044440077a99a77f999f999b3bbb3b704244240bff7ff7709999990
2e2208202ef222200444444099a8a897300000030004440044424442f22fffff94fa9949004bb40077999977999f999fbb333b7b04244240377f77f307777770
2222822022222220099999907898988733333333000fff0022202220ffff44ff92a99929007bb70077999977949444493bb3bbb3044444403f7f773b06777760
222222202222220000444400779999773333333300ffff00499249920f4f42f009299290004bb40007a99a704f7777f0b33b333300022000b3fff3bb0d7777d0
022222000222200000999900077777700333333000fff0004442444200ffff00000440000024420000777700077777700bb33330000ff0000b333bb000bb03b3
00ff00ff09999990000f80000bb009a900000400000000000000000000000770000606000000f9f0077b33000222222000aaaaa0000b0000000000000bb33bbb
0094499f999999990ee88ee000bb9a9a77fff4f900000000003333000000077700066000000f9f9f7aa7bb30222222220aaaaa9900033000000044400b33bb33
000fff9088888888e8ee8ee833b9a9a90877ffff099999900303b33009997777000dd0000009f4f97a27b7b324000042aaaaaaa909944990004f44420b3bb330
0ff9f4403aaaaaa3ee8ee8ee0b9a9a90088877ff9a88aa8933333b3399999700006766000f9f4f997aa7bbb322f44422aaaaaaa99a999999044444f206363bbb
f99f4ff0444aa444888888880ba9a9b077bb887788aa88a83b3333339999940006776760f9f9f99072a7b33342222224aa9aaaa99a9aa9a944444442077bbbb3
9aa409904444444407f7f7f00bba9bbb00778888888888880bbb333094999400767767679f4f90007aa7bbb394444449aaa9a9999a9aa9a94944442077763330
9aa40000999999990f9f9f90b3bbb30b000077bb999999990bab33334999440076776767f4f990007a27bb309f4ffff9bba999909a4aa9a92444420077000000
09400000099999900f9f9f90bb0003000000007709999990babbb333044440000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000bb003330000000000000000000000000000000000000000000000000000000000000000000000000
00000040000000000bb0bbb09999000000000330007777000000000000b33b000000000000000000000000000000000000000000000000000000000000000000
00000f4900000000b0bbb0bb4449990000099aa307777770097999700737b3b00000000000000000000000000000000000000000000000000000000000000000
0000f7f904444ff0000b0000989449900b9994a30777777097999799b37bbb3b0000000000000000000000000000000000000000000000000000000000000000
0ff77fa94244fe8f0eeeee00888aa490ba444ab377a99a77f999f999b3bbb3b70000000000000000000000000000000000000000000000000000000000000000
f77ffa904442f87feffeffe0989aa499baaaab3377999977999f999fbb333b7b0000000000000000000000000000000000000000000000000000000000000000
f7ffa9002444f88f777f7770aaaa88493bbbb33077999977949444493bb3bbb30000000000000000000000000000000000000000000000000000000000000000
9faa99002222f8ef07777700a88a88490333330007a99a704f7777f0b33b33330000000000000000000000000000000000000000000000000000000000000000
0999900002222ff000070000a88aa9490033300000777700077777700bb333300000000000000000000000000000000000000000000000000000000000000000
009919000000888000000000000887700bbbbbb0077b33000222222000aaaaa00000000000000000000000000000000000000000000000000000000000000000
0c19999000772888030bb03000788777b303303b7aa7bb30222222220aaaaa990000000000000000000000000000000000000000000000000000000000000000
911a91190c7c78880833338007777777b3b77b0b7a27b7b324000042aaaaaaa90000000000000000000000000000000000000000000000000000000000000000
99a99119cc1777288383383877777777b033033b7aa7bbb322f44422aaaaaaa90000000000000000000000000000000000000000000000000000000000000000
4999999401cc7c7087e888884ff44ff42bbbbbb272a7b33342222224aa9aaaa90000000000000000000000000000000000000000000000000000000000000000
04444440044c17708e888888f44ff44f222222227aa7bbb394444449aaa9a9990000000000000000000000000000000000000000000000000000000000000000
09494940ff41cc008888888844444444224444427a27bb309f4ffff9bba999900000000000000000000000000000000000000000000000000000000000000000
02494920ff00c00008888880f777777f02244420077b33000ffffff0bba999000000000000000000000000000000000000000000000000000000000000000000
